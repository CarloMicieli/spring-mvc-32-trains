/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group = "com.trenako"
description = "A social network for model railways."

def springVersion = "3.1.2.RELEASE"
def dataVersion = "1.0.2.RELEASE"
def securityVersion = "3.1.1.RELEASE"
def slf4jVersion = "1.6.1"
def spockVersion = "0.6-groovy-1.8"
def mongoDriverVersion = "2.8.0"
def hibernateValidationVersion = "4.3.0.Final"

allprojects {
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'eclipse-wtp'

	sourceCompatibility = JavaVersion.VERSION_1_6
	targetCompatibility = JavaVersion.VERSION_1_6

	repositories {
		mavenCentral()
		maven {url "http://repo.springsource.org/release"}
		maven {url "http://repo.springsource.org/libs-snapshot"}
		maven {url "http://repository.jboss.org/nexus/content/repositories/releases/"}
		maven {url "http://oss.sonatype.org/content/repositories/snapshots/"}
	}

	configurations {
		integrationTestCompile {
			extendsFrom testCompile
		}
		integrationTestRuntime {
			extendsFrom integrationTestCompile, testRuntime
		}
	}

	sourceSets {
		integrationTest {
			groovy.srcDir file('src/integrationTest/groovy')
			resources.srcDir file('src/integrationTest/resources')
			compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
			runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
		}
	}

	eclipse {
		// add the integration classpath
		classpath {
			plusConfigurations += configurations.integrationTestRuntime

			//default settings for dependencies sources/javadoc download:
			downloadSources = true
			downloadJavadoc = true
		}
	}

	dependencies {
		// logging
		compile "org.slf4j:slf4j-api:${slf4jVersion}"
		runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
			"org.slf4j:slf4j-log4j12:${slf4jVersion}",
			"log4j:log4j:1.2.16"

		// unit testing
		testCompile "junit:junit:4.10",
			"org.mockito:mockito-core:1.9.0",
			"org.springframework:spring-test:${springVersion}"

		// integration testing
		groovy "org.codehaus.groovy:groovy-all:1.8.6"
		integrationTestCompile "org.spockframework:spock-core:${spockVersion}",
			"org.spockframework:spock-spring:${spockVersion}"
	}

	// integration testing: the application is deployed to the web container
	task integrationTest(description: 'Runs the integration tests.', group: 'Verification', type: Test) {
		testClassesDir = sourceSets.integrationTest.output.classesDir
		classpath = sourceSets.integrationTest.runtimeClasspath
	}
	check.dependsOn integrationTest
}

subprojects { subproj ->
	jar {
		manifest.attributes['Implementation-Title'] = subproj.name
		manifest.attributes['Implementation-Version'] = subproj.version
	}
}

project("trenako-common") {
	description = 'The domain entity classes.'

	dependencies {
		// spring framework
		compile("org.springframework:spring-context:${springVersion}") {
			exclude group: "commons-logging", module: "commons-logging"
		}

		// logging
		compile "org.slf4j:slf4j-api:${slf4jVersion}"
		runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
			"org.slf4j:slf4j-log4j12:${slf4jVersion}",
			"log4j:log4j:1.2.16"

		// GCLIB, required for @Configuration usage
		compile "cglib:cglib-nodep:2.2.2"

		// apache commons
		compile "org.apache.commons:commons-lang3:3.1"

		// JSR 303 with Hibernate Validator
		compile "javax.validation:validation-api:1.0.0.GA"
		compile "org.hibernate:hibernate-validator:${hibernateValidationVersion}",
			"org.hibernate:hibernate-validator-annotation-processor:${hibernateValidationVersion}"

		// mongodb
		compile "org.springframework.data:spring-data-mongodb:${dataVersion}"
		compile "org.mongodb:mongo-java-driver:${mongoDriverVersion}"
	}
} 

project("trenako-services") {
	description = 'The domain entity classes.'

	dependencies {
		compile project(":trenako-common")

		// spring security
		compile("org.springframework.security:spring-security-core:${securityVersion}") {
			exclude group: "commons-logging", module: "commons-logging"
		}
		compile("org.springframework.security:spring-security-config:${securityVersion}") {
			exclude group: "commons-logging", module: "commons-logging"
		}

		// export common test classes
		testCompile project(":trenako-common").sourceSets.test.output
		integrationTestCompile "com.gmongo:gmongo:0.9.5"
	}
}

project("trenako-web") {
	apply plugin: 'war'

	description = 'The mvc web application.'

	dependencies {
		compile project(":trenako-common")
		compile project(":trenako-services")

		// spring mvc
		compile "org.springframework:spring-web:${springVersion}"
		compile "org.springframework:spring-webmvc:${springVersion}"

		compile("org.springframework.security:spring-security-web:${securityVersion}") {
			exclude group: "commons-logging", module: "commons-logging"
		}
		compile("org.springframework.security:spring-security-config:${securityVersion}") {
			exclude group: "commons-logging", module: "commons-logging"
		}
		compile "org.springframework.security:spring-security-taglibs:${securityVersion}"

		// GCLIB, required for @Configuration usage
		compile "cglib:cglib-nodep:2.2.2"

		// Sitemesh
		compile "opensymphony:sitemesh:2.4.2"

		compile "commons-beanutils:commons-beanutils-core:1.8.3"

		// spring data commons
		compile "org.springframework.data:spring-data-commons-core:1.1.0.RELEASE"

		// mongodb
		compile "org.springframework.data:spring-data-mongodb:${dataVersion}"
		compile "org.mongodb:mongo-java-driver:${mongoDriverVersion}"

		// imgscalr
		compile "org.imgscalr:imgscalr-lib:4.2"

		// files upload
		compile "commons-fileupload:commons-fileupload:1.2.2",
			"commons-io:commons-io:2.1"

		// Servlet Api
		providedCompile "javax.servlet:javax.servlet-api:3.0.1"
		compile "javax.servlet:jstl:1.2",
			"javax.servlet.jsp:javax.servlet.jsp-api:2.2.1"

		// export common test classes
		testCompile project(":trenako-common").sourceSets.test.output		

		// Spring test mvc
		testCompile "org.springframework:spring-test-mvc:1.0.0.BUILD-SNAPSHOT",
			"org.hamcrest:hamcrest-core:1.2.1",
			"org.hamcrest:hamcrest-library:1.2.1"
		
		// PowerMock (for static class tests)
		testCompile "org.powermock:powermock-module-junit4:1.4.12",
			"org.powermock:powermock-api-mockito:1.4.12"
	}
}

// javadoc 
task projectDoc(type: Javadoc, group: 'Documentation', description: 'Generates aggregated Javadoc API documentation.') {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	source subprojects.collect { subproj ->
		subproj.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "docs")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

// wrapper task to create the download script
task wrapper(type: Wrapper, group: 'Gradle wrapper', description: 'Gradle will be automatically downloaded and used to run the build.') {
	gradleVersion = '1.0'
}

